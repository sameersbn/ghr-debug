version: 2.1

orbs:
  go: circleci/go@1.1.1
  gcp-cli: circleci/gcp-cli@1.8.4
  ghpr: narrativescience/ghpr@0.1.0
  jq: circleci/jq@2.0.1
  codecov: codecov/codecov@1.0.5

commands:
  deploy:
    description: "Deploy updates to target cluster"
    parameters:
      branch:
        type: string
        default: dev
      cluster:
        type: string
        default: staging
      keycloak:
        type: boolean
        default: false
    steps:
      - run: echo Deploying to << parameters.cluster >> using << parameters.branch >> branch
      - run: |
          echo "step 1"
          <<# parameters.keycloak >>echo "update keycloak"<</ parameters.keycloak >>
      - when:
          condition: << parameters.branch >>
          steps:
            - run: echo "run this step only when branch is specified"

jobs:
  checkout:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - jq/install
      - ghpr/build-prospective-branch
      - ghpr/post-pr-comment:
          comment: ":dog: The CI job was __aborted__ because we __failed to create a prospective merge branch__. Please __resolve the merge conflicts__."
          when: on_fail
      - go/mod-download-cached
      - persist_to_workspace:
          root: ~/
          paths:
            - go
            - project

  build:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Building package
          command: make build
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Building docker image
          command: |
            gcloud builds submit --config cloudbuild.yaml --substitutions _KANIKO_NO_PUSH=true

  test:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Validating code formatting
          command: make fmt-test
      - run:
          name: Vetting code
          command: make vet
      - run:
          name: Running go unit tests
          command: mkdir -p ${OUTPUT_DIR} && make test
          environment:
            OUTPUT_DIR: /tmp/test-results/
      - store_test_results:
          path: /tmp/test-results/
      - run:
          name: Generating coverage report
          command: mkdir -p ${OUTPUT_DIR} && make coverage
          environment:
            OUTPUT_DIR: /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - codecov/upload:
          file: c.out

  publish:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          at: ~/
      - gcp-cli/initialize
      - run:
          name: Publishing docker image
          command: gcloud builds submit --config cloudbuild.yaml --substitutions COMMIT_SHA=${CIRCLE_SHA1},TAG_NAME=${CIRCLE_TAG:-$(git describe --tags --always)},_KANIKO_IMAGE_TAG=${CIRCLE_TAG:-latest}

  deploy:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - deploy:
          cluster: staging
          keycloak: true

  release:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Building release packages
          command: make release
          environment:
            DIST_DIR: /tmp/dist/
            GIT_TAG: ${CIRCLE_TAG}
            GIT_COMMIT: ${CIRCLE_SHA1}
      - run:
          name: Installing github-release tool
          command: go get github.com/meterup/github-release
      - run:
          name: Creating github release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            ./scripts/release-notes.sh ${CIRCLE_TAG} | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -
            for f in $(find /tmp/dist -type f); do github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f} ; done

workflows:
  build-test-and-publish:
    jobs:
      - checkout:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - build:
          requires:
            - checkout
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - test:
          requires:
            - checkout
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - publish:
          requires:
            - build
            - test
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: master
      - deploy:
          requires:
            - publish
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: master
      - release:
          requires:
            - publish
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
