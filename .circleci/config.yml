version: 2.1

orbs:
  go: circleci/go@1.1.1
  gcp-cli: circleci/gcp-cli@1.8.4
  codecov: codecov/codecov@1.0.5

jobs:
  build:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Building package
          command: make build
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Building docker image
          command: gcloud builds submit --config cloudbuild.yaml --substitutions _KANIKO_NO_PUSH=true

  test:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Validating code formatting
          command: make fmt-test
      - run:
          name: Vetting code
          command: make vet
      - run:
          name: Running go unit tests
          command: mkdir -p ${OUTPUT_DIR} && make test
          environment:
            OUTPUT_DIR: /tmp/test-results/
      - store_test_results:
          path: /tmp/test-results/
      - run:
          name: Generating coverage report
          command: mkdir -p ${OUTPUT_DIR} && make coverage
          environment:
            OUTPUT_DIR: /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - codecov/upload:
          file: c.out

  publish:
    executor:
      name: gcp-cli/google
    steps:
      - checkout
      - gcp-cli/initialize
      - run:
          name: Publishing docker image
          command: gcloud builds submit --config cloudbuild.yaml --substitutions COMMIT_SHA=${CIRCLE_SHA1},TAG_NAME=${CIRCLE_TAG:-$(git describe --tags --always)},_KANIKO_IMAGE_TAG=${CIRCLE_TAG:-latest}

  release:
    executor:
      name: go/default
      tag: '1.14'
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Building release packages
          command: make release
          environment:
            DIST_DIR: /tmp/dist/
            GIT_TAG: ${CIRCLE_TAG}
            GIT_COMMIT: ${CIRCLE_SHA1}
      - run:
          name: Generate changelog
          command: |
            PREV_RELEASE=$(git describe --always --tags --abbrev=0 ${CIRCLE_TAG}^)
            (
              git cat-file -p ${CIRCLE_TAG} | sed '/-----BEGIN PGP SIGNATURE-----/,//d' | tail -n +6
              echo -e "\n# Changelog\n"
              git log --no-merges --pretty=format:'- %s %H (%aN)' ${PREV_RELEASE}..${CIRCLE_TAG}
            ) > /tmp/release-notes.txt
      - run:
          name: Installing github-release
          command: go get github.com/aktau/github-release
      - run:
          name: Creating github release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            cat /tmp/release-notes.txt | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -
            for f in $(find /tmp/dist -type f); do github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f} ; done

workflows:
  build-test-and-publish:
    jobs:
      - build:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - test:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - publish:
          requires:
            - build
            - test
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: master
      - release:
          requires:
            - publish
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
