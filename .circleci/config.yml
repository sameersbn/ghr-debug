version: 2.1

orbs:
  shellcheck: circleci/shellcheck@1.3.16
  docker: circleci/docker@1.0.1

commands:
  docker-build:
    description: |
      Build and optionally deploy a Docker images
    parameters:
      dockerfile:
        default: Dockerfile
        description: 'Name of dockerfile to use, defaults to Dockerfile'
        type: string
      extra_build_args:
        default: ''
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
      registry:
        default: docker.io
        description: |
          Comma separated list of registry to use, defaults to docker.io
        type: string
      image:
        description: Name of image to build
        type: string
      tag:
        default: $CIRCLE_SHA1
        description: 'Image tag, defaults to the value of $CIRCLE_SHA1'
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your Dockerfile and build context,
          defaults to . (working directory)
        type: string
      cache_from:
        default: ''
        description: >
          Comma-separated list of images, images will first be pulled, then passed
          as the --cache-from build argument
          https://docs.docker.com/engine/reference/commandline/build/
        type: string
      no_output_timeout:
        default: 10m
        description: |
          No output timeout for build step
        type: string
    steps:
      - when:
          condition: <<parameters.cache_from>>
          steps:
            - run:
                name: Build image for <<parameters.registry>>
                no_output_timeout: <<parameters.no_output_timeout>>
                command: >
                  set -x
                  echo "<<parameters.cache_from>>" | sed -n 1'p' | tr ',' '\n' |
                  while read image; do
                    echo "Pulling ${image}";
                    docker pull ${image} || true
                  done

                  docker_tag_args=""

                  IFS="," read -ra DOCKER_REGISTRIES \<<< "<< parameters.registry >>"

                  for registry in "${DOCKER_REGISTRIES[@]}"; do
                    IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"

                    for tag in "${DOCKER_TAGS[@]}"; do
                      docker_tag_args="$docker_tag_args -t $registry/<<parameters.image>>:${tag}"
                    done
                  done

                  docker build
                  <<#parameters.extra_build_args>><<parameters.extra_build_args>><</parameters.extra_build_args>>
                  \
                    --cache-from <<parameters.cache_from>> \
                    -f <<parameters.path>>/<<parameters.dockerfile>> \
                    $docker_tag_args \
                    <<parameters.path>>
      - unless:
          condition: <<parameters.cache_from>>
          steps:
            - run:
                name: Building image for <<parameters.registry>>
                no_output_timeout: <<parameters.no_output_timeout>>
                command: >
                  docker_tag_args=""

                  IFS="," read -ra DOCKER_REGISTRIES \<<< "<< parameters.registry >>"

                  for registry in "${DOCKER_REGISTRIES[@]}"; do
                    IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"

                    for tag in "${DOCKER_TAGS[@]}"; do
                      docker_tag_args="$docker_tag_args -t $registry/<<parameters.image>>:${tag}"
                    done
                  done

                  docker build
                  <<#parameters.extra_build_args>><<parameters.extra_build_args>><</parameters.extra_build_args>>
                  \
                    -f <<parameters.path>>/<<parameters.dockerfile>> \
                    $docker_tag_args \
                    <<parameters.path>>

  docker-publish:
    description: |
      Build and optionally deploy a Docker images
    parameters:
      pr:
        default: $CI_PULL_REQUEST
        type: string
      registry:
        default: docker.io
        description: |
          Comma separated list of registry to use, defaults to docker.io
        type: string
      image:
        description: Name of image to build
        type: string
      tag:
        default: $CIRCLE_SHA1
        description: 'Image tag, defaults to the value of $CIRCLE_SHA1'
        type: string
    steps:
      - when:
          condition: <<parameters.pr>>
          steps:
            - run:
                name: Publish image for <<parameters.registry>>
                command: >
                  IFS="," read -ra DOCKER_REGISTRIES \<<< "<< parameters.registry >>"

                  for registry in "${DOCKER_REGISTRIES[@]}"; do
                    IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"

                    for tag in "${DOCKER_TAGS[@]}"; do
                      docker push $registry/<< parameters.image>>:${tag}
                    done
                  done

jobs:
  build-and-publish:
    executor: docker/machine
    steps:
      - checkout
      - docker-build:
          registry: docker.io,quay.io
          image: sameersbn/shaout
          tag: latest
          cache_from: docker.io/sameersbn/shaout:latest
          extra_build_args: '--build-arg GIT_COMMIT=${CIRCLE_SHA1} --build-arg GIT_TAG=$(date +%s)'
          no_output_timeout: 45m
      - docker/check:
          registry: docker.io
          docker-username: DOCKER_LOGIN
          docker-password: DOCKER_PASSWORD
      - docker/check:
          registry: quay.io
          docker-username: QUAY_LOGIN
          docker-password: QUAY_PASSWORD
      - docker-publish:
          registry: docker.io,quay.io
          image: sameersbn/shaout
          tag: latest

workflows:
  build-and-publish:
    jobs:
      - shellcheck/check:
          name: shellcheck
          ignore: SC2086,SC2181
      - build-and-publish:
          context: sameersbn
          requires:
            - shellcheck
